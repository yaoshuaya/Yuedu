name: "越狱应用构建工作流"

on:
  schedule:
    - cron: '0 */2 * * *' # 每2小时自动构建
  workflow_dispatch: # 支持手动触发
  push:
    branches: [main, master] # 主分支推送时触发

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: macos-latest # 使用最新macOS版本
    
    env:
      APP_NAME: "yuedu" # 应用名称
      REPO_URL: "https://"https://github.com/yaoshuaya/Yuedu" # 仓库地址
      IOS_SDK: "iPhoneOS16.5" # iOS SDK版本
      BUILD_SCHEME: "rootless" # 构建方案(rootless/rootful)

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_URL }}
          submodules: recursive
          fetch-depth: 0

      - name: 安装基础工具链
        uses: dhinakg/procursus-action@main
        with:
          packages: ldid findutils gsed coreutils make git

      - name: 安装THEOS框架
        run: |
          set -x
          export THEOS="${{ github.workspace }}/theos"
          mkdir -p $THEOS
          
          # 通用THEOS安装脚本
          curl -fsSL https://raw.githubusercontent.com/theos/theos/master/bin/install-theos > install-theos.sh
          chmod +x install-theos.sh
          ./install-theos.sh
          
          # 下载iOS SDK
          SDK_URL="https://github.com/theos/sdks/releases/latest/download/${{ env.IOS_SDK }}.sdk.tar.xz"
          curl -L $SDK_URL --output $THEOS/sdks/sdk.tar.xz
          tar -xf $THEOS/sdks/sdk.tar.xz -C $THEOS/sdks
          rm $THEOS/sdks/sdk.tar.xz
          
          # 设置环境变量
          echo "THEOS=$THEOS" >> $GITHUB_ENV
          echo "PATH=$THEOS/bin:$PATH" >> $GITHUB_ENV

      - name: 安装构建依赖
        run: |
          brew install libarchive pkg-config
          
          # 可选：安装项目特定依赖
          if [ -f "requirements.txt" ]; then
            pip3 install -r requirements.txt
          fi

      - name: 设置构建信息
        run: |
          set -x
          BUILD_TIME=$(date -u +'%Y%m%d_%H%M%S')
          GIT_HASH=$(git rev-parse --short HEAD)
          APP_VERSION=$(git describe --tags --abbrev=0 || echo "1.0.0")
          
          echo "BUILD_TIME=${BUILD_TIME}" >> $GITHUB_ENV
          echo "GIT_HASH=${GIT_HASH}" >> $GITHUB_ENV
          echo "APP_VERSION=${APP_VERSION}" >> $GITHUB_ENV
          echo "OUTPUT_NAME=${{ env.APP_NAME }}-v${{ env.APP_VERSION }}.tipa" >> $GITHUB_ENV

      - name: 预处理(可选)
        run: |
          # 示例：修改应用元数据
          if [ -f "AppInfo.plist" ]; then
            plutil -replace CFBundleVersion -string "${{ env.BUILD_TIME }}" AppInfo.plist
            plutil -replace CFBundleShortVersionString -string "${{ env.APP_VERSION }}" AppInfo.plist
          fi
          
          # 示例：添加构建者信息
          if [ -f "Credits.plist" ]; then
            itemcount=$(plutil -extract items raw -expect array Credits.plist)
            for ((i=0; i<$itemcount; i++)); do
              if [ "$(plutil -extract items.$i.headerCellClass raw Credits.plist)" = "ContributorCell" ]; then
                plutil -insert items.$i.contributors -xml "<dict><key>name</key><string>${{ github.actor }}</string><key>link</key><string>https://github.com/${{ github.repository }}</string></dict>" -append Credits.plist
                break
              fi
            done
          fi

      - name: 执行构建
        run: |
          set -x
          export THEOS="${{ github.workspace }}/theos"
          
          # 通用构建命令
          make clean
          make package \
            THEOS_PACKAGE_SCHEME=${{ env.BUILD_SCHEME }} \
            ARCHS=arm64 \
            TARGET=iphone:clang:latest:13.0 \
            DEBUG=0 \
            FINALPACKAGE=1 \
            -j$(sysctl -n hw.physicalcpu)
          
          # 重命名输出文件
          if [ -f "packages/*.tipa" ]; then
            mv packages/*.tipa "${{ env.OUTPUT_NAME }}"
          fi

      - name: 后处理(可选)
        run: |
          # 示例：安装额外工具
          if [ "${{ env.INSTALL_TRUSTCACHE }}" = "true" ]; then
            git clone https://github.com/CRKatri/trustcache
            cd trustcache
            make -j$(sysctl -n hw.physicalcpu)
            sudo cp trustcache /usr/local/bin/
          fi

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT_NAME }}
          path: ${{ env.OUTPUT_NAME }}

      - name: 创建版本发布
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.OUTPUT_NAME }}
          tag_name: ${{ github.ref }}
          name: ${{ env.APP_NAME }} v${{ env.APP_VERSION }}
          body: |
            自动构建版本
            - 版本: ${{ env.APP_VERSION }}
            - 提交: ${{ env.GIT_HASH }}
            - 构建时间: ${{ env.BUILD_TIME }}
            - 构建方案: ${{ env.BUILD_SCHEME }}
